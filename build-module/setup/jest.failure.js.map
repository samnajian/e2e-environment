{"version":3,"sources":["/Users/samnajian/Dev/woocommerce/packages/js/e2e-environment/src/setup/jest.failure.js"],"names":["bind","sendFailedTestScreenshotToSlack","sendFailedTestMessageToSlack","takeScreenshotFor","require","originalDescribe","global","describe","originalIt","it","blockName","callback","e","only","skip","each","test","testName","testCallback","screenshotTest","title","filePath"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { bind } from 'jest-each';\n\n/**\n * Internal dependencies\n */\nimport {\n\tsendFailedTestScreenshotToSlack,\n\tsendFailedTestMessageToSlack,\n} from '../slack';\nconst { takeScreenshotFor } = require( '../../utils' );\n\n/**\n * Override the test case method so we can take screenshots of assertion failures.\n *\n * See: https://github.com/smooth-code/jest-puppeteer/issues/131#issuecomment-469439666\n */\n\n/**\n * We need to reference the original version of Jest.\n */\nconst originalDescribe = global.describe;\nconst originalIt = global.it;\n\n/**\n * A custom describe function that stores the name of the describe block.\n *\n * @type {describe}\n */\nglobal.describe = ( () => {\n\tconst describe = ( blockName, callback ) => {\n\t\ttry {\n\t\t\toriginalDescribe( blockName, callback );\n\t\t} catch ( e ) {\n\t\t\tthrow e;\n\t\t}\n\t};\n\tconst only = ( blockName, callback ) => {\n\t\toriginalDescribe.only( blockName, callback );\n\t};\n\tconst skip = ( blockName, callback ) => {\n\t\toriginalDescribe.skip( blockName, callback );\n\t};\n\n\tdescribe.each = bind( describe, false );\n\tonly.each = bind( only, false );\n\tskip.each = bind( skip, false );\n\tdescribe.only = only;\n\tdescribe.skip = skip;\n\n\treturn describe;\n} )();\n\n/**\n * A custom it function that wraps the test function in a callback\n * which takes a screenshot on test failure.\n *\n * @type {function(*=, *=): *}\n */\nglobal.it = ( () => {\n\tconst test = async ( testName, callback ) => {\n\t\tconst testCallback = async () => screenshotTest( testName, callback );\n\t\treturn originalIt( testName, testCallback );\n\t};\n\tconst only = ( testName, callback ) => {\n\t\treturn originalIt.only( testName, callback );\n\t};\n\tconst skip = ( testName, callback ) => {\n\t\treturn originalIt.skip( testName, callback );\n\t};\n\n\ttest.each = bind( test, false );\n\tonly.each = bind( only, false );\n\tskip.each = bind( skip, false );\n\ttest.only = only;\n\ttest.skip = skip;\n\n\treturn test;\n} )();\n\n/**\n * Save a screenshot during a test if the test fails.\n *\n * @param {string}   testName\n * @param {Function} callback\n * @return {Promise<void>}\n */\nconst screenshotTest = async ( testName, callback ) => {\n\ttry {\n\t\tawait callback();\n\t} catch ( e ) {\n\t\tconst { title, filePath } = await takeScreenshotFor( testName );\n\t\tawait sendFailedTestMessageToSlack( title );\n\t\tif ( filePath ) {\n\t\t\tawait sendFailedTestScreenshotToSlack( filePath );\n\t\t}\n\n\t\tthrow e;\n\t}\n};\n"]}